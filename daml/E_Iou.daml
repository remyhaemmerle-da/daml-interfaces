--------------------------------------------------------
---- Interfaces are usefull to factorize code (2/2) ----
--------------------------------------------------------

module E_Iou where

import qualified A_Asset as Asset
import qualified D_Token as Token

template Iou with
    issuer : Party
    owner : Party
    amount : Int
  where
    signatory issuer, owner

    interface instance Asset.Asset for Iou where
      view = Asset.View owner
      assetOwner = owner
      transfer newOwner = do
        cid <- create $ IouProposal this newOwner
        pure $ toInterfaceContractId cid

    interface instance Token.Token for Iou where
      view = Token.View issuer owner amount
      tokenIssuer = issuer
      tokenAmount = amount
      split x = do
        (cid1, cid2) <- splitImpl this x
        pure (toInterfaceContractId cid1, toInterfaceContractId cid2)

splitImpl : Iou -> Int -> Update (ContractId Iou, ContractId Iou)
splitImpl iou x =  do
  let restAmount = iou.amount - x
  splitCid <- create iou with amount = x
  restCid <- create iou with amount = iou.amount - x
  pure (splitCid, restCid)

template IouProposal
  with
    iou: Iou
    proponee: Party
  where
    signatory signatory iou
    observer proponee
    interface instance Asset.Proposal for IouProposal where
      view = Asset.View iou.owner
      proposalAsset = toInterface iou
      proposalProponee = proponee
      accept = do
        cid <- create $ iou with owner = proponee
        pure $ toInterfaceContractId cid
      cancel = do
        cid <- create iou
        pure $ toInterfaceContractId cid

